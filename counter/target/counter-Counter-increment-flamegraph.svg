<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="574" onload="init(evt)" viewBox="0 0 1200 574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = true;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="574" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Artifact: /tmp/counter-Counter-increment.json, Function: main</text><text id="details" fill="rgb(0,0,0)" x="10" y="557.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="557.00"> </text><svg id="frames" x="10" width="1180" total_samples="26043"><g><title>acir::arithmetic (699 gates, 2.68%)</title><rect x="0.0000%" y="493" width="2.6840%" height="23" fill="rgb(255,225,225)" fg:x="0" fg:w="699"/><text x="0.2500%" y="507.50">ac..</text></g><g><title>acir::blackbox::range (3,109 gates, 11.94%)</title><rect x="2.6840%" y="493" width="11.9379%" height="23" fill="rgb(255,198,198)" fg:x="699" fg:w="3109"/><text x="2.9340%" y="507.50">acir::blackbox::ra..</text></g><g><title>acir::memory::init (1,432 gates, 5.50%)</title><rect x="14.6220%" y="493" width="5.4986%" height="23" fill="rgb(255,214,214)" fg:x="3808" fg:w="1432"/><text x="14.8720%" y="507.50">acir::m..</text></g><g><title>mod.nr:169:21::self.to_be_radix (120 gates, 0.46%)</title><rect x="20.1206%" y="301" width="0.4608%" height="23" fill="rgb(255,239,239)" fg:x="5240" fg:w="120"/><text x="20.3706%" y="315.50"></text></g><g><title>mod.nr:207:9::self.__to_be_radix (120 gates, 0.46%)</title><rect x="20.1206%" y="277" width="0.4608%" height="23" fill="rgb(255,239,239)" fg:x="5240" fg:w="120"/><text x="20.3706%" y="291.50"></text></g><g><title>acir::blackbox::range (120 gates, 0.46%)</title><rect x="20.1206%" y="253" width="0.4608%" height="23" fill="rgb(255,239,239)" fg:x="5240" fg:w="120"/><text x="20.3706%" y="267.50"></text></g><g><title>mod.nr:178:25::bytes[i] != p[i] (372 gates, 1.43%)</title><rect x="20.5813%" y="301" width="1.4284%" height="23" fill="rgb(255,232,232)" fg:x="5360" fg:w="372"/><text x="20.8313%" y="315.50"></text></g><g><title>acir::arithmetic (372 gates, 1.43%)</title><rect x="20.5813%" y="277" width="1.4284%" height="23" fill="rgb(255,232,232)" fg:x="5360" fg:w="372"/><text x="20.8313%" y="291.50"></text></g><g><title>acir::arithmetic (522 gates, 2.00%)</title><rect x="22.0098%" y="277" width="2.0044%" height="23" fill="rgb(255,228,228)" fg:x="5732" fg:w="522"/><text x="22.2598%" y="291.50">a..</text></g><g><title>mod.nr:179:32::bytes[i] &lt; p[i] (718 gates, 2.76%)</title><rect x="22.0098%" y="301" width="2.7570%" height="23" fill="rgb(255,225,225)" fg:x="5732" fg:w="718"/><text x="22.2598%" y="315.50">mo..</text></g><g><title>acir::blackbox::range (196 gates, 0.75%)</title><rect x="24.0141%" y="277" width="0.7526%" height="23" fill="rgb(255,237,237)" fg:x="6254" fg:w="196"/><text x="24.2641%" y="291.50"></text></g><g><title>aes128.nr:116:31::fields_to_bytes(plaintext) (1,213 gates, 4.66%)</title><rect x="20.1206%" y="349" width="4.6577%" height="23" fill="rgb(255,217,217)" fg:x="5240" fg:w="1213"/><text x="20.3706%" y="363.50">aes12..</text></g><g><title>fields_to_bytes.nr:23:40::fields[i].to_be_bytes (1,213 gates, 4.66%)</title><rect x="20.1206%" y="325" width="4.6577%" height="23" fill="rgb(255,217,217)" fg:x="5240" fg:w="1213"/><text x="20.3706%" y="339.50">field..</text></g><g><title>mod.nr:184:20::ok (3 gates, 0.01%)</title><rect x="24.7667%" y="301" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="6450" fg:w="3"/><text x="25.0167%" y="315.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="24.7667%" y="277" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="6450" fg:w="3"/><text x="25.0167%" y="291.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (10 gates, 0.04%)</title><rect x="24.7783%" y="277" width="0.0384%" height="23" fill="rgb(255,247,247)" fg:x="6453" fg:w="10"/><text x="25.0283%" y="291.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (10 gates, 0.04%)</title><rect x="24.7783%" y="253" width="0.0384%" height="23" fill="rgb(255,247,247)" fg:x="6453" fg:w="10"/><text x="25.0283%" y="267.50"></text></g><g><title>acir::blackbox::range (10 gates, 0.04%)</title><rect x="24.7783%" y="229" width="0.0384%" height="23" fill="rgb(255,247,247)" fg:x="6453" fg:w="10"/><text x="25.0283%" y="243.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="24.8166%" y="277" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="6463" fg:w="7"/><text x="25.0666%" y="291.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="24.8166%" y="253" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="6463" fg:w="7"/><text x="25.0666%" y="267.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.03%)</title><rect x="24.8166%" y="229" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="6463" fg:w="7"/><text x="25.0666%" y="243.50"></text></g><g><title>bn254.nr:65:23::x, xlo + TWO_POW_128 * xhi (1 gates, 0.00%)</title><rect x="24.8435%" y="277" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="6470" fg:w="1"/><text x="25.0935%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="24.8435%" y="253" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="6470" fg:w="1"/><text x="25.0935%" y="267.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="24.8474%" y="253" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="6471" fg:w="1"/><text x="25.0974%" y="267.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="24.8474%" y="229" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="6471" fg:w="1"/><text x="25.0974%" y="243.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="24.8512%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="6472" fg:w="1"/><text x="25.1012%" y="219.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (7 gates, 0.03%)</title><rect x="24.8512%" y="253" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="6472" fg:w="7"/><text x="25.1012%" y="267.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="24.8512%" y="229" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="6472" fg:w="7"/><text x="25.1012%" y="243.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="24.8550%" y="205" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="6473" fg:w="6"/><text x="25.1050%" y="219.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="24.8781%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="6479" fg:w="1"/><text x="25.1281%" y="219.50"></text></g><g><title>ephemeral.nr:18:18::EmbeddedCurveScalar::from_field(randomness) (33 gates, 0.13%)</title><rect x="24.7783%" y="325" width="0.1267%" height="23" fill="rgb(255,244,244)" fg:x="6453" fg:w="33"/><text x="25.0283%" y="339.50"></text></g><g><title>embedded_curve_ops.nr:96:22::crate::field::bn254::decompose(scalar) (33 gates, 0.13%)</title><rect x="24.7783%" y="301" width="0.1267%" height="23" fill="rgb(255,244,244)" fg:x="6453" fg:w="33"/><text x="25.0283%" y="315.50"></text></g><g><title>bn254.nr:68:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (15 gates, 0.06%)</title><rect x="24.8474%" y="277" width="0.0576%" height="23" fill="rgb(255,246,246)" fg:x="6471" fg:w="15"/><text x="25.0974%" y="291.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="24.8781%" y="253" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="6479" fg:w="7"/><text x="25.1281%" y="267.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="24.8781%" y="229" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="6479" fg:w="7"/><text x="25.1281%" y="243.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="24.8819%" y="205" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="6480" fg:w="6"/><text x="25.1319%" y="219.50"></text></g><g><title>aes128.nr:122:32::generate_ephemeral_key_pair() (657 gates, 2.52%)</title><rect x="24.7783%" y="349" width="2.5228%" height="23" fill="rgb(255,226,226)" fg:x="6453" fg:w="657"/><text x="25.0283%" y="363.50">ae..</text></g><g><title>ephemeral.nr:19:18::fixed_base_scalar_mul(eph_sk) (624 gates, 2.40%)</title><rect x="24.9050%" y="325" width="2.3960%" height="23" fill="rgb(255,226,226)" fg:x="6486" fg:w="624"/><text x="25.1550%" y="339.50">ep..</text></g><g><title>embedded_curve_ops.nr:158:5::multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar]) (624 gates, 2.40%)</title><rect x="24.9050%" y="301" width="2.3960%" height="23" fill="rgb(255,226,226)" fg:x="6486" fg:w="624"/><text x="25.1550%" y="315.50">em..</text></g><g><title>embedded_curve_ops.nr:145:5::multi_scalar_mul_array_return(points, scalars) (624 gates, 2.40%)</title><rect x="24.9050%" y="277" width="2.3960%" height="23" fill="rgb(255,226,226)" fg:x="6486" fg:w="624"/><text x="25.1550%" y="291.50">em..</text></g><g><title>acir::blackbox::multi_scalar_mul (624 gates, 2.40%)</title><rect x="24.9050%" y="253" width="2.3960%" height="23" fill="rgb(255,226,226)" fg:x="6486" fg:w="624"/><text x="25.1550%" y="267.50">ac..</text></g><g><title>bn254.nr:100:15::a == b (2 gates, 0.01%)</title><rect x="27.3010%" y="253" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7110" fg:w="2"/><text x="27.5510%" y="267.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="27.3010%" y="229" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7110" fg:w="2"/><text x="27.5510%" y="243.50"></text></g><g><title>bn254.nr:105:16::field_less_than(a, b) (1 gates, 0.00%)</title><rect x="27.3087%" y="253" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7112" fg:w="1"/><text x="27.5587%" y="267.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="27.3087%" y="229" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7112" fg:w="1"/><text x="27.5587%" y="243.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.3125%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7113" fg:w="1"/><text x="27.5625%" y="171.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.3125%" y="205" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7113" fg:w="7"/><text x="27.5625%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.3125%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7113" fg:w="7"/><text x="27.5625%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.3164%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7114" fg:w="6"/><text x="27.5664%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.3394%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7120" fg:w="1"/><text x="27.5894%" y="171.50"></text></g><g><title>bn254.nr:82:23::decompose(a) (16 gates, 0.06%)</title><rect x="27.3125%" y="229" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="7113" fg:w="16"/><text x="27.5625%" y="243.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.3394%" y="205" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7120" fg:w="9"/><text x="27.5894%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.3394%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7120" fg:w="9"/><text x="27.5894%" y="195.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="27.3432%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7121" fg:w="8"/><text x="27.5932%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="27.3740%" y="157" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7129" fg:w="2"/><text x="27.6240%" y="171.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.3740%" y="205" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7129" fg:w="8"/><text x="27.6240%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.3740%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7129" fg:w="8"/><text x="27.6240%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.3816%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7131" fg:w="6"/><text x="27.6316%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.4047%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7137" fg:w="1"/><text x="27.6547%" y="171.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.4047%" y="205" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7137" fg:w="7"/><text x="27.6547%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.4047%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7137" fg:w="7"/><text x="27.6547%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.4085%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7138" fg:w="6"/><text x="27.6585%" y="171.50"></text></g><g><title>bn254.nr:65:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="27.4316%" y="205" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="7144" fg:w="3"/><text x="27.6816%" y="219.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="27.4316%" y="181" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="7144" fg:w="3"/><text x="27.6816%" y="195.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="27.4431%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7147" fg:w="1"/><text x="27.6931%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="27.4431%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7147" fg:w="1"/><text x="27.6931%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="27.4469%" y="133" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7148" fg:w="2"/><text x="27.6969%" y="147.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.4469%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7148" fg:w="8"/><text x="27.6969%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.4469%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7148" fg:w="8"/><text x="27.6969%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.4546%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7150" fg:w="6"/><text x="27.7046%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.4776%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7156" fg:w="1"/><text x="27.7276%" y="147.50"></text></g><g><title>bn254.nr:83:23::decompose(b) (36 gates, 0.14%)</title><rect x="27.3740%" y="229" width="0.1382%" height="23" fill="rgb(255,244,244)" fg:x="7129" fg:w="36"/><text x="27.6240%" y="243.50"></text></g><g><title>bn254.nr:68:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (18 gates, 0.07%)</title><rect x="27.4431%" y="205" width="0.0691%" height="23" fill="rgb(255,246,246)" fg:x="7147" fg:w="18"/><text x="27.6931%" y="219.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.4776%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7156" fg:w="9"/><text x="27.7276%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.4776%" y="157" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7156" fg:w="9"/><text x="27.7276%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="27.4815%" y="133" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7157" fg:w="8"/><text x="27.7315%" y="147.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="27.5122%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7165" fg:w="1"/><text x="27.7622%" y="219.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="27.5122%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7165" fg:w="1"/><text x="27.7622%" y="195.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="27.5160%" y="157" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7166" fg:w="2"/><text x="27.7660%" y="171.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.5160%" y="205" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7166" fg:w="8"/><text x="27.7660%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.5160%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7166" fg:w="8"/><text x="27.7660%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.5237%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7168" fg:w="6"/><text x="27.7737%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.5467%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7174" fg:w="1"/><text x="27.7967%" y="171.50"></text></g><g><title>bn254.nr:106:17::assert_gt(b, a) (68 gates, 0.26%)</title><rect x="27.3125%" y="253" width="0.2611%" height="23" fill="rgb(255,242,242)" fg:x="7113" fg:w="68"/><text x="27.5625%" y="267.50"></text></g><g><title>bn254.nr:86:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="27.5122%" y="229" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="7165" fg:w="16"/><text x="27.7622%" y="243.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.5467%" y="205" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7174" fg:w="7"/><text x="27.7967%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.5467%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7174" fg:w="7"/><text x="27.7967%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.5506%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7175" fg:w="6"/><text x="27.8006%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="27.5736%" y="157" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7181" fg:w="2"/><text x="27.8236%" y="171.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.5736%" y="205" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7181" fg:w="8"/><text x="27.8236%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.5736%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7181" fg:w="8"/><text x="27.8236%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.5813%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7183" fg:w="6"/><text x="27.8313%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.6043%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7189" fg:w="1"/><text x="27.8543%" y="171.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.6043%" y="205" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7189" fg:w="9"/><text x="27.8543%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.6043%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7189" fg:w="9"/><text x="27.8543%" y="195.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="27.6082%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7190" fg:w="8"/><text x="27.8582%" y="171.50"></text></g><g><title>bn254.nr:65:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="27.6389%" y="205" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="7198" fg:w="3"/><text x="27.8889%" y="219.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="27.6389%" y="181" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="7198" fg:w="3"/><text x="27.8889%" y="195.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="27.6504%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7201" fg:w="1"/><text x="27.9004%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="27.6504%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7201" fg:w="1"/><text x="27.9004%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="27.6543%" y="133" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7202" fg:w="2"/><text x="27.9043%" y="147.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.6543%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7202" fg:w="8"/><text x="27.9043%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.6543%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7202" fg:w="8"/><text x="27.9043%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.6619%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7204" fg:w="6"/><text x="27.9119%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.6850%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7210" fg:w="1"/><text x="27.9350%" y="147.50"></text></g><g><title>bn254.nr:82:23::decompose(a) (36 gates, 0.14%)</title><rect x="27.5736%" y="229" width="0.1382%" height="23" fill="rgb(255,244,244)" fg:x="7181" fg:w="36"/><text x="27.8236%" y="243.50"></text></g><g><title>bn254.nr:68:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (16 gates, 0.06%)</title><rect x="27.6504%" y="205" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="7201" fg:w="16"/><text x="27.9004%" y="219.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.6850%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7210" fg:w="7"/><text x="27.9350%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.6850%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7210" fg:w="7"/><text x="27.9350%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.6888%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7211" fg:w="6"/><text x="27.9388%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.7119%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7217" fg:w="1"/><text x="27.9619%" y="171.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.7119%" y="205" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7217" fg:w="7"/><text x="27.9619%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.7119%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7217" fg:w="7"/><text x="27.9619%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.7157%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7218" fg:w="6"/><text x="27.9657%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.7387%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7224" fg:w="1"/><text x="27.9887%" y="171.50"></text></g><g><title>bn254.nr:83:23::decompose(b) (16 gates, 0.06%)</title><rect x="27.7119%" y="229" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="7217" fg:w="16"/><text x="27.9619%" y="243.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.7387%" y="205" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7224" fg:w="9"/><text x="27.9887%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="27.7387%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="7224" fg:w="9"/><text x="27.9887%" y="195.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="27.7426%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7225" fg:w="8"/><text x="27.9926%" y="171.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="27.7733%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7233" fg:w="1"/><text x="28.0233%" y="219.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="27.7733%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7233" fg:w="1"/><text x="28.0233%" y="195.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="27.7771%" y="157" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="7234" fg:w="2"/><text x="28.0271%" y="171.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.7771%" y="205" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7234" fg:w="8"/><text x="28.0271%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="27.7771%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="7234" fg:w="8"/><text x="28.0271%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.7848%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7236" fg:w="6"/><text x="28.0348%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.8079%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7242" fg:w="1"/><text x="28.0579%" y="171.50"></text></g><g><title>aes128.nr:124:36::get_sign_of_point(eph_pk) (139 gates, 0.53%)</title><rect x="27.3010%" y="349" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="7110" fg:w="139"/><text x="27.5510%" y="363.50"></text></g><g><title>point.nr:39:6::BN254_FR_MODULUS_DIV_2.lt (139 gates, 0.53%)</title><rect x="27.3010%" y="325" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="7110" fg:w="139"/><text x="27.5510%" y="339.50"></text></g><g><title>mod.nr:240:13::bn254_lt(self, another) (139 gates, 0.53%)</title><rect x="27.3010%" y="301" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="7110" fg:w="139"/><text x="27.5510%" y="315.50"></text></g><g><title>bn254.nr:117:5::gt(b, a) (139 gates, 0.53%)</title><rect x="27.3010%" y="277" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="7110" fg:w="139"/><text x="27.5510%" y="291.50"></text></g><g><title>bn254.nr:109:17::assert_gt(a, b) (68 gates, 0.26%)</title><rect x="27.5736%" y="253" width="0.2611%" height="23" fill="rgb(255,242,242)" fg:x="7181" fg:w="68"/><text x="27.8236%" y="267.50"></text></g><g><title>bn254.nr:86:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="27.7733%" y="229" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="7233" fg:w="16"/><text x="28.0233%" y="243.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.8079%" y="205" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7242" fg:w="7"/><text x="28.0579%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="27.8079%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="7242" fg:w="7"/><text x="28.0579%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="27.8117%" y="157" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="7243" fg:w="6"/><text x="28.0617%" y="171.50"></text></g><g><title>aztec_address.nr:88:25::pow(x, 3) (1 gates, 0.00%)</title><rect x="27.8347%" y="301" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7249" fg:w="1"/><text x="28.0847%" y="315.50"></text></g><g><title>field.nr:64:9::r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field) (1 gates, 0.00%)</title><rect x="27.8347%" y="277" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7249" fg:w="1"/><text x="28.0847%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="27.8347%" y="253" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7249" fg:w="1"/><text x="28.0847%" y="267.50"></text></g><g><title>field.nr:63:9::r *= r (224 gates, 0.86%)</title><rect x="27.8386%" y="253" width="0.8601%" height="23" fill="rgb(255,236,236)" fg:x="7250" fg:w="224"/><text x="28.0886%" y="267.50"></text></g><g><title>acir::arithmetic (224 gates, 0.86%)</title><rect x="27.8386%" y="229" width="0.8601%" height="23" fill="rgb(255,236,236)" fg:x="7250" fg:w="224"/><text x="28.0886%" y="243.50"></text></g><g><title>field.nr:76:17::pow(x, C3) (322 gates, 1.24%)</title><rect x="27.8386%" y="277" width="1.2364%" height="23" fill="rgb(255,233,233)" fg:x="7250" fg:w="322"/><text x="28.0886%" y="291.50"></text></g><g><title>field.nr:64:9::r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field) (98 gates, 0.38%)</title><rect x="28.6987%" y="253" width="0.3763%" height="23" fill="rgb(255,240,240)" fg:x="7474" fg:w="98"/><text x="28.9487%" y="267.50"></text></g><g><title>acir::arithmetic (98 gates, 0.38%)</title><rect x="28.6987%" y="229" width="0.3763%" height="23" fill="rgb(255,240,240)" fg:x="7474" fg:w="98"/><text x="28.9487%" y="243.50"></text></g><g><title>field.nr:77:17::z * z * x (1 gates, 0.00%)</title><rect x="29.0750%" y="277" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7572" fg:w="1"/><text x="29.3250%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="29.0750%" y="253" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7572" fg:w="1"/><text x="29.3250%" y="267.50"></text></g><g><title>field.nr:77:17::z * z (1 gates, 0.00%)</title><rect x="29.0788%" y="277" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7573" fg:w="1"/><text x="29.3288%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="29.0788%" y="253" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="7573" fg:w="1"/><text x="29.3288%" y="267.50"></text></g><g><title>field.nr:84:13::b *= b (351 gates, 1.35%)</title><rect x="29.0827%" y="277" width="1.3478%" height="23" fill="rgb(255,232,232)" fg:x="7574" fg:w="351"/><text x="29.3327%" y="291.50"></text></g><g><title>acir::arithmetic (351 gates, 1.35%)</title><rect x="29.0827%" y="253" width="1.3478%" height="23" fill="rgb(255,232,232)" fg:x="7574" fg:w="351"/><text x="29.3327%" y="267.50"></text></g><g><title>field.nr:87:17::b == 1 (81 gates, 0.31%)</title><rect x="30.4304%" y="277" width="0.3110%" height="23" fill="rgb(255,241,241)" fg:x="7925" fg:w="81"/><text x="30.6804%" y="291.50"></text></g><g><title>acir::arithmetic (81 gates, 0.31%)</title><rect x="30.4304%" y="253" width="0.3110%" height="23" fill="rgb(255,241,241)" fg:x="7925" fg:w="81"/><text x="30.6804%" y="267.50"></text></g><g><title>aztec_address.nr:91:21::sqrt(y_squared) (810 gates, 3.11%)</title><rect x="27.8386%" y="301" width="3.1102%" height="23" fill="rgb(255,223,223)" fg:x="7250" fg:w="810"/><text x="28.0886%" y="315.50">azt..</text></g><g><title>field.nr:87:9::z *= if b == 1 { 1 } else { c } (54 gates, 0.21%)</title><rect x="30.7415%" y="277" width="0.2073%" height="23" fill="rgb(255,243,243)" fg:x="8006" fg:w="54"/><text x="30.9915%" y="291.50"></text></g><g><title>acir::arithmetic (54 gates, 0.21%)</title><rect x="30.7415%" y="253" width="0.2073%" height="23" fill="rgb(255,243,243)" fg:x="8006" fg:w="54"/><text x="30.9915%" y="267.50"></text></g><g><title>bn254.nr:100:15::a == b (3 gates, 0.01%)</title><rect x="30.9488%" y="229" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="8060" fg:w="3"/><text x="31.1988%" y="243.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="30.9488%" y="205" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="8060" fg:w="3"/><text x="31.1988%" y="219.50"></text></g><g><title>bn254.nr:105:16::field_less_than(a, b) (1 gates, 0.00%)</title><rect x="30.9603%" y="229" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8063" fg:w="1"/><text x="31.2103%" y="243.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="30.9603%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8063" fg:w="1"/><text x="31.2103%" y="219.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="30.9642%" y="133" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8064" fg:w="2"/><text x="31.2142%" y="147.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="30.9642%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8064" fg:w="8"/><text x="31.2142%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="30.9642%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8064" fg:w="8"/><text x="31.2142%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="30.9719%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8066" fg:w="6"/><text x="31.2219%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="30.9949%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8072" fg:w="1"/><text x="31.2449%" y="147.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="30.9949%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8072" fg:w="9"/><text x="31.2449%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="30.9949%" y="157" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8072" fg:w="9"/><text x="31.2449%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="30.9987%" y="133" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8073" fg:w="8"/><text x="31.2487%" y="147.50"></text></g><g><title>bn254.nr:65:23::x, xlo + TWO_POW_128 * xhi (4 gates, 0.02%)</title><rect x="31.0295%" y="181" width="0.0154%" height="23" fill="rgb(255,248,248)" fg:x="8081" fg:w="4"/><text x="31.2795%" y="195.50"></text></g><g><title>acir::arithmetic (4 gates, 0.02%)</title><rect x="31.0295%" y="157" width="0.0154%" height="23" fill="rgb(255,248,248)" fg:x="8081" fg:w="4"/><text x="31.2795%" y="171.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="31.0448%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8085" fg:w="1"/><text x="31.2948%" y="171.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="31.0448%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8085" fg:w="1"/><text x="31.2948%" y="147.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="31.0487%" y="109" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8086" fg:w="2"/><text x="31.2987%" y="123.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.0487%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8086" fg:w="8"/><text x="31.2987%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.0487%" y="133" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8086" fg:w="8"/><text x="31.2987%" y="147.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.0563%" y="109" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8088" fg:w="6"/><text x="31.3063%" y="123.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.0794%" y="109" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8094" fg:w="1"/><text x="31.3294%" y="123.50"></text></g><g><title>bn254.nr:82:23::decompose(a) (37 gates, 0.14%)</title><rect x="30.9642%" y="205" width="0.1421%" height="23" fill="rgb(255,244,244)" fg:x="8064" fg:w="37"/><text x="31.2142%" y="219.50"></text></g><g><title>bn254.nr:68:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (16 gates, 0.06%)</title><rect x="31.0448%" y="181" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="8085" fg:w="16"/><text x="31.2948%" y="195.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.0794%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8094" fg:w="7"/><text x="31.3294%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.0794%" y="133" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8094" fg:w="7"/><text x="31.3294%" y="147.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.0832%" y="109" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8095" fg:w="6"/><text x="31.3332%" y="123.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.1062%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8101" fg:w="1"/><text x="31.3562%" y="147.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.1062%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8101" fg:w="7"/><text x="31.3562%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.1062%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8101" fg:w="7"/><text x="31.3562%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.1101%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8102" fg:w="6"/><text x="31.3601%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.1331%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8108" fg:w="1"/><text x="31.3831%" y="147.50"></text></g><g><title>bn254.nr:83:23::decompose(b) (16 gates, 0.06%)</title><rect x="31.1062%" y="205" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="8101" fg:w="16"/><text x="31.3562%" y="219.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="31.1331%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8108" fg:w="9"/><text x="31.3831%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="31.1331%" y="157" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8108" fg:w="9"/><text x="31.3831%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="31.1370%" y="133" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8109" fg:w="8"/><text x="31.3870%" y="147.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="31.1677%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8117" fg:w="1"/><text x="31.4177%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="31.1677%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8117" fg:w="1"/><text x="31.4177%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="31.1715%" y="133" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8118" fg:w="2"/><text x="31.4215%" y="147.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.1715%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8118" fg:w="8"/><text x="31.4215%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.1715%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8118" fg:w="8"/><text x="31.4215%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.1792%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8120" fg:w="6"/><text x="31.4292%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.2022%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8126" fg:w="1"/><text x="31.4522%" y="147.50"></text></g><g><title>bn254.nr:106:17::assert_gt(b, a) (69 gates, 0.26%)</title><rect x="30.9642%" y="229" width="0.2649%" height="23" fill="rgb(255,242,242)" fg:x="8064" fg:w="69"/><text x="31.2142%" y="243.50"></text></g><g><title>bn254.nr:86:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="31.1677%" y="205" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="8117" fg:w="16"/><text x="31.4177%" y="219.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.2022%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8126" fg:w="7"/><text x="31.4522%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.2022%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8126" fg:w="7"/><text x="31.4522%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.2061%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8127" fg:w="6"/><text x="31.4561%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.2291%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8133" fg:w="1"/><text x="31.4791%" y="147.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.2291%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8133" fg:w="7"/><text x="31.4791%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.2291%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8133" fg:w="7"/><text x="31.4791%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.2330%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8134" fg:w="6"/><text x="31.4830%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.2560%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8140" fg:w="1"/><text x="31.5060%" y="147.50"></text></g><g><title>bn254.nr:82:23::decompose(a) (16 gates, 0.06%)</title><rect x="31.2291%" y="205" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="8133" fg:w="16"/><text x="31.4791%" y="219.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="31.2560%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8140" fg:w="9"/><text x="31.5060%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="31.2560%" y="157" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8140" fg:w="9"/><text x="31.5060%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="31.2598%" y="133" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8141" fg:w="8"/><text x="31.5098%" y="147.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="31.2906%" y="133" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8149" fg:w="2"/><text x="31.5406%" y="147.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.2906%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8149" fg:w="8"/><text x="31.5406%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.2906%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8149" fg:w="8"/><text x="31.5406%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.2982%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8151" fg:w="6"/><text x="31.5482%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.3213%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8157" fg:w="1"/><text x="31.5713%" y="147.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.3213%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8157" fg:w="7"/><text x="31.5713%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.3213%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8157" fg:w="7"/><text x="31.5713%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.3251%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8158" fg:w="6"/><text x="31.5751%" y="147.50"></text></g><g><title>bn254.nr:65:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="31.3482%" y="181" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="8164" fg:w="3"/><text x="31.5982%" y="195.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="31.3482%" y="157" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="8164" fg:w="3"/><text x="31.5982%" y="171.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="31.3597%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8167" fg:w="1"/><text x="31.6097%" y="171.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="31.3597%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8167" fg:w="1"/><text x="31.6097%" y="147.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="31.3635%" y="109" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8168" fg:w="2"/><text x="31.6135%" y="123.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.3635%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8168" fg:w="8"/><text x="31.6135%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.3635%" y="133" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8168" fg:w="8"/><text x="31.6135%" y="147.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.3712%" y="109" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8170" fg:w="6"/><text x="31.6212%" y="123.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.3942%" y="109" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8176" fg:w="1"/><text x="31.6442%" y="123.50"></text></g><g><title>bn254.nr:83:23::decompose(b) (36 gates, 0.14%)</title><rect x="31.2906%" y="205" width="0.1382%" height="23" fill="rgb(255,244,244)" fg:x="8149" fg:w="36"/><text x="31.5406%" y="219.50"></text></g><g><title>bn254.nr:68:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (18 gates, 0.07%)</title><rect x="31.3597%" y="181" width="0.0691%" height="23" fill="rgb(255,246,246)" fg:x="8167" fg:w="18"/><text x="31.6097%" y="195.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="31.3942%" y="157" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8176" fg:w="9"/><text x="31.6442%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="31.3942%" y="133" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="8176" fg:w="9"/><text x="31.6442%" y="147.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="31.3981%" y="109" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8177" fg:w="8"/><text x="31.6481%" y="123.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="31.4288%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8185" fg:w="1"/><text x="31.6788%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="31.4288%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8185" fg:w="1"/><text x="31.6788%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="31.4326%" y="133" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8186" fg:w="2"/><text x="31.6826%" y="147.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.4326%" y="181" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8186" fg:w="8"/><text x="31.6826%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="31.4326%" y="157" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="8186" fg:w="8"/><text x="31.6826%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.4403%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8188" fg:w="6"/><text x="31.6903%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="31.4633%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8194" fg:w="1"/><text x="31.7133%" y="147.50"></text></g><g><title>aztec_address.nr:96:15::y.lt (141 gates, 0.54%)</title><rect x="30.9488%" y="301" width="0.5414%" height="23" fill="rgb(255,238,238)" fg:x="8060" fg:w="141"/><text x="31.1988%" y="315.50"></text></g><g><title>mod.nr:240:13::bn254_lt(self, another) (141 gates, 0.54%)</title><rect x="30.9488%" y="277" width="0.5414%" height="23" fill="rgb(255,238,238)" fg:x="8060" fg:w="141"/><text x="31.1988%" y="291.50"></text></g><g><title>bn254.nr:117:5::gt(b, a) (141 gates, 0.54%)</title><rect x="30.9488%" y="253" width="0.5414%" height="23" fill="rgb(255,238,238)" fg:x="8060" fg:w="141"/><text x="31.1988%" y="267.50"></text></g><g><title>bn254.nr:109:17::assert_gt(a, b) (68 gates, 0.26%)</title><rect x="31.2291%" y="229" width="0.2611%" height="23" fill="rgb(255,242,242)" fg:x="8133" fg:w="68"/><text x="31.4791%" y="243.50"></text></g><g><title>bn254.nr:86:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="31.4288%" y="205" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="8185" fg:w="16"/><text x="31.6788%" y="219.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.4633%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8194" fg:w="7"/><text x="31.7133%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="31.4633%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="8194" fg:w="7"/><text x="31.7133%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="31.4672%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="8195" fg:w="6"/><text x="31.7172%" y="147.50"></text></g><g><title>aztec_address.nr:96:43::y.eq (2 gates, 0.01%)</title><rect x="31.4902%" y="301" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8201" fg:w="2"/><text x="31.7402%" y="315.50"></text></g><g><title>cmp.nr:34:9::self == other (2 gates, 0.01%)</title><rect x="31.4902%" y="277" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8201" fg:w="2"/><text x="31.7402%" y="291.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="31.4902%" y="253" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="8201" fg:w="2"/><text x="31.7402%" y="267.50"></text></g><g><title>ecdh_shared_secret.nr:27:49::recipient_address.to_address_point (957 gates, 3.67%)</title><rect x="27.8347%" y="325" width="3.6747%" height="23" fill="rgb(255,221,221)" fg:x="7249" fg:w="957"/><text x="28.0847%" y="339.50">ecdh..</text></g><g><title>aztec_address.nr:97:17::(MAX_FIELD_VALUE + 1) - y (3 gates, 0.01%)</title><rect x="31.4979%" y="301" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="8203" fg:w="3"/><text x="31.7479%" y="315.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="31.4979%" y="277" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="8203" fg:w="3"/><text x="31.7479%" y="291.50"></text></g><g><title>aes128.nr:128:13::derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient) (1,718 gates, 6.60%)</title><rect x="27.8347%" y="349" width="6.5968%" height="23" fill="rgb(255,211,211)" fg:x="7249" fg:w="1718"/><text x="28.0847%" y="363.50">aes128.nr..</text></g><g><title>ecdh_shared_secret.nr:27:5::derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner) (761 gates, 2.92%)</title><rect x="31.5094%" y="325" width="2.9221%" height="23" fill="rgb(255,224,224)" fg:x="8206" fg:w="761"/><text x="31.7594%" y="339.50">ec..</text></g><g><title>ecdh_shared_secret.nr:15:25::multi_scalar_mul([public_key], [secret]) (761 gates, 2.92%)</title><rect x="31.5094%" y="301" width="2.9221%" height="23" fill="rgb(255,224,224)" fg:x="8206" fg:w="761"/><text x="31.7594%" y="315.50">ec..</text></g><g><title>embedded_curve_ops.nr:145:5::multi_scalar_mul_array_return(points, scalars) (761 gates, 2.92%)</title><rect x="31.5094%" y="277" width="2.9221%" height="23" fill="rgb(255,224,224)" fg:x="8206" fg:w="761"/><text x="31.7594%" y="291.50">em..</text></g><g><title>acir::blackbox::multi_scalar_mul (761 gates, 2.92%)</title><rect x="31.5094%" y="253" width="2.9221%" height="23" fill="rgb(255,224,224)" fg:x="8206" fg:w="761"/><text x="31.7594%" y="267.50">ac..</text></g><g><title>point.nr:16:12::!p.is_infinite (1 gates, 0.00%)</title><rect x="34.4315%" y="253" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8967" fg:w="1"/><text x="34.6815%" y="267.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="34.4315%" y="229" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="8967" fg:w="1"/><text x="34.6815%" y="243.50"></text></g><g><title>acir::blackbox::range (40 gates, 0.15%)</title><rect x="34.4354%" y="181" width="0.1536%" height="23" fill="rgb(255,244,244)" fg:x="8968" fg:w="40"/><text x="34.6854%" y="195.50"></text></g><g><title>mod.nr:169:21::self.to_be_radix (43 gates, 0.17%)</title><rect x="34.4354%" y="229" width="0.1651%" height="23" fill="rgb(255,243,243)" fg:x="8968" fg:w="43"/><text x="34.6854%" y="243.50"></text></g><g><title>mod.nr:207:9::self.__to_be_radix (43 gates, 0.17%)</title><rect x="34.4354%" y="205" width="0.1651%" height="23" fill="rgb(255,243,243)" fg:x="8968" fg:w="43"/><text x="34.6854%" y="219.50"></text></g><g><title>acir::memory::init (3 gates, 0.01%)</title><rect x="34.5889%" y="181" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="9008" fg:w="3"/><text x="34.8389%" y="195.50"></text></g><g><title>mod.nr:178:25::bytes[i] != p[i] (124 gates, 0.48%)</title><rect x="34.6005%" y="229" width="0.4761%" height="23" fill="rgb(255,239,239)" fg:x="9011" fg:w="124"/><text x="34.8505%" y="243.50"></text></g><g><title>acir::arithmetic (124 gates, 0.48%)</title><rect x="34.6005%" y="205" width="0.4761%" height="23" fill="rgb(255,239,239)" fg:x="9011" fg:w="124"/><text x="34.8505%" y="219.50"></text></g><g><title>acir::arithmetic (174 gates, 0.67%)</title><rect x="35.0766%" y="205" width="0.6681%" height="23" fill="rgb(255,237,237)" fg:x="9135" fg:w="174"/><text x="35.3266%" y="219.50"></text></g><g><title>mod.nr:179:32::bytes[i] &lt; p[i] (239 gates, 0.92%)</title><rect x="35.0766%" y="229" width="0.9177%" height="23" fill="rgb(255,235,235)" fg:x="9135" fg:w="239"/><text x="35.3266%" y="243.50"></text></g><g><title>acir::blackbox::range (65 gates, 0.25%)</title><rect x="35.7447%" y="205" width="0.2496%" height="23" fill="rgb(255,242,242)" fg:x="9309" fg:w="65"/><text x="35.9947%" y="219.50"></text></g><g><title>point.nr:18:32::p.x.to_be_bytes (407 gates, 1.56%)</title><rect x="34.4354%" y="253" width="1.5628%" height="23" fill="rgb(255,231,231)" fg:x="8968" fg:w="407"/><text x="34.6854%" y="267.50"></text></g><g><title>mod.nr:184:20::ok (1 gates, 0.00%)</title><rect x="35.9943%" y="229" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9374" fg:w="1"/><text x="36.2443%" y="243.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="35.9943%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9374" fg:w="1"/><text x="36.2443%" y="219.50"></text></g><g><title>bn254.nr:100:15::a == b (2 gates, 0.01%)</title><rect x="35.9982%" y="157" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9375" fg:w="2"/><text x="36.2482%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="35.9982%" y="133" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9375" fg:w="2"/><text x="36.2482%" y="147.50"></text></g><g><title>bn254.nr:105:16::field_less_than(a, b) (1 gates, 0.00%)</title><rect x="36.0058%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9377" fg:w="1"/><text x="36.2558%" y="171.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="36.0058%" y="133" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9377" fg:w="1"/><text x="36.2558%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.0097%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9378" fg:w="1"/><text x="36.2597%" y="75.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.0097%" y="109" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9378" fg:w="7"/><text x="36.2597%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.0097%" y="85" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9378" fg:w="7"/><text x="36.2597%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.0135%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9379" fg:w="6"/><text x="36.2635%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.0366%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9385" fg:w="1"/><text x="36.2866%" y="75.50"></text></g><g><title>bn254.nr:82:23::decompose(a) (16 gates, 0.06%)</title><rect x="36.0097%" y="133" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="9378" fg:w="16"/><text x="36.2597%" y="147.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.0366%" y="109" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9385" fg:w="9"/><text x="36.2866%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.0366%" y="85" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9385" fg:w="9"/><text x="36.2866%" y="99.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="36.0404%" y="61" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9386" fg:w="8"/><text x="36.2904%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="36.0711%" y="61" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9394" fg:w="2"/><text x="36.3211%" y="75.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.0711%" y="109" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9394" fg:w="8"/><text x="36.3211%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.0711%" y="85" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9394" fg:w="8"/><text x="36.3211%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.0788%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9396" fg:w="6"/><text x="36.3288%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.1018%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9402" fg:w="1"/><text x="36.3518%" y="75.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.1018%" y="109" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9402" fg:w="7"/><text x="36.3518%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.1018%" y="85" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9402" fg:w="7"/><text x="36.3518%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.1057%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9403" fg:w="6"/><text x="36.3557%" y="75.50"></text></g><g><title>bn254.nr:65:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="36.1287%" y="109" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="9409" fg:w="3"/><text x="36.3787%" y="123.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="36.1287%" y="85" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="9409" fg:w="3"/><text x="36.3787%" y="99.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="36.1402%" y="85" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9412" fg:w="1"/><text x="36.3902%" y="99.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="36.1402%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9412" fg:w="1"/><text x="36.3902%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="36.1441%" y="37" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9413" fg:w="2"/><text x="36.3941%" y="51.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.1441%" y="85" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9413" fg:w="8"/><text x="36.3941%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.1441%" y="61" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9413" fg:w="8"/><text x="36.3941%" y="75.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.1517%" y="37" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9415" fg:w="6"/><text x="36.4017%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.1748%" y="37" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9421" fg:w="1"/><text x="36.4248%" y="51.50"></text></g><g><title>bn254.nr:83:23::decompose(b) (36 gates, 0.14%)</title><rect x="36.0711%" y="133" width="0.1382%" height="23" fill="rgb(255,244,244)" fg:x="9394" fg:w="36"/><text x="36.3211%" y="147.50"></text></g><g><title>bn254.nr:68:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (18 gates, 0.07%)</title><rect x="36.1402%" y="109" width="0.0691%" height="23" fill="rgb(255,246,246)" fg:x="9412" fg:w="18"/><text x="36.3902%" y="123.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.1748%" y="85" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9421" fg:w="9"/><text x="36.4248%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.1748%" y="61" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9421" fg:w="9"/><text x="36.4248%" y="75.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="36.1786%" y="37" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9422" fg:w="8"/><text x="36.4286%" y="51.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="36.2093%" y="109" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9430" fg:w="1"/><text x="36.4593%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="36.2093%" y="85" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9430" fg:w="1"/><text x="36.4593%" y="99.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="36.2132%" y="61" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9431" fg:w="2"/><text x="36.4632%" y="75.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.2132%" y="109" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9431" fg:w="8"/><text x="36.4632%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.2132%" y="85" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9431" fg:w="8"/><text x="36.4632%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.2209%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9433" fg:w="6"/><text x="36.4709%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.2439%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9439" fg:w="1"/><text x="36.4939%" y="75.50"></text></g><g><title>bn254.nr:106:17::assert_gt(b, a) (68 gates, 0.26%)</title><rect x="36.0097%" y="157" width="0.2611%" height="23" fill="rgb(255,242,242)" fg:x="9378" fg:w="68"/><text x="36.2597%" y="171.50"></text></g><g><title>bn254.nr:86:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="36.2093%" y="133" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="9430" fg:w="16"/><text x="36.4593%" y="147.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.2439%" y="109" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9439" fg:w="7"/><text x="36.4939%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.2439%" y="85" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9439" fg:w="7"/><text x="36.4939%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.2477%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9440" fg:w="6"/><text x="36.4977%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="36.2708%" y="61" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9446" fg:w="2"/><text x="36.5208%" y="75.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.2708%" y="109" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9446" fg:w="8"/><text x="36.5208%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.2708%" y="85" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9446" fg:w="8"/><text x="36.5208%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.2785%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9448" fg:w="6"/><text x="36.5285%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.3015%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9454" fg:w="1"/><text x="36.5515%" y="75.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.3015%" y="109" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9454" fg:w="9"/><text x="36.5515%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.3015%" y="85" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9454" fg:w="9"/><text x="36.5515%" y="99.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="36.3053%" y="61" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9455" fg:w="8"/><text x="36.5553%" y="75.50"></text></g><g><title>bn254.nr:65:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="36.3361%" y="109" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="9463" fg:w="3"/><text x="36.5861%" y="123.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="36.3361%" y="85" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="9463" fg:w="3"/><text x="36.5861%" y="99.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="36.3476%" y="85" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9466" fg:w="1"/><text x="36.5976%" y="99.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="36.3476%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9466" fg:w="1"/><text x="36.5976%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="36.3514%" y="37" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9467" fg:w="2"/><text x="36.6014%" y="51.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.3514%" y="85" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9467" fg:w="8"/><text x="36.6014%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.3514%" y="61" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9467" fg:w="8"/><text x="36.6014%" y="75.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.3591%" y="37" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9469" fg:w="6"/><text x="36.6091%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.3821%" y="37" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9475" fg:w="1"/><text x="36.6321%" y="51.50"></text></g><g><title>bn254.nr:82:23::decompose(a) (36 gates, 0.14%)</title><rect x="36.2708%" y="133" width="0.1382%" height="23" fill="rgb(255,244,244)" fg:x="9446" fg:w="36"/><text x="36.5208%" y="147.50"></text></g><g><title>bn254.nr:68:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (16 gates, 0.06%)</title><rect x="36.3476%" y="109" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="9466" fg:w="16"/><text x="36.5976%" y="123.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.3821%" y="85" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9475" fg:w="7"/><text x="36.6321%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.3821%" y="61" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9475" fg:w="7"/><text x="36.6321%" y="75.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.3860%" y="37" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9476" fg:w="6"/><text x="36.6360%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.4090%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9482" fg:w="1"/><text x="36.6590%" y="75.50"></text></g><g><title>bn254.nr:61:13::xlo.assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.4090%" y="109" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9482" fg:w="7"/><text x="36.6590%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.4090%" y="85" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9482" fg:w="7"/><text x="36.6590%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.4129%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9483" fg:w="6"/><text x="36.6629%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.4359%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9489" fg:w="1"/><text x="36.6859%" y="75.50"></text></g><g><title>bn254.nr:83:23::decompose(b) (16 gates, 0.06%)</title><rect x="36.4090%" y="133" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="9482" fg:w="16"/><text x="36.6590%" y="147.50"></text></g><g><title>bn254.nr:62:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.4359%" y="109" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9489" fg:w="9"/><text x="36.6859%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="36.4359%" y="85" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9489" fg:w="9"/><text x="36.6859%" y="99.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="36.4397%" y="61" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9490" fg:w="8"/><text x="36.6897%" y="75.50"></text></g><g><title>bn254.nr:40:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="36.4705%" y="109" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9498" fg:w="1"/><text x="36.7205%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="36.4705%" y="85" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9498" fg:w="1"/><text x="36.7205%" y="99.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="36.4743%" y="61" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9499" fg:w="2"/><text x="36.7243%" y="75.50"></text></g><g><title>bn254.nr:45:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.4743%" y="109" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9499" fg:w="8"/><text x="36.7243%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="36.4743%" y="85" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9499" fg:w="8"/><text x="36.7243%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.4820%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9501" fg:w="6"/><text x="36.7320%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.5050%" y="61" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9507" fg:w="1"/><text x="36.7550%" y="75.50"></text></g><g><title>point.nr:20:8::get_sign_of_point(p) (139 gates, 0.53%)</title><rect x="35.9982%" y="253" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="9375" fg:w="139"/><text x="36.2482%" y="267.50"></text></g><g><title>point.nr:39:6::BN254_FR_MODULUS_DIV_2.lt (139 gates, 0.53%)</title><rect x="35.9982%" y="229" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="9375" fg:w="139"/><text x="36.2482%" y="243.50"></text></g><g><title>mod.nr:240:13::bn254_lt(self, another) (139 gates, 0.53%)</title><rect x="35.9982%" y="205" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="9375" fg:w="139"/><text x="36.2482%" y="219.50"></text></g><g><title>bn254.nr:117:5::gt(b, a) (139 gates, 0.53%)</title><rect x="35.9982%" y="181" width="0.5337%" height="23" fill="rgb(255,239,239)" fg:x="9375" fg:w="139"/><text x="36.2482%" y="195.50"></text></g><g><title>bn254.nr:109:17::assert_gt(a, b) (68 gates, 0.26%)</title><rect x="36.2708%" y="157" width="0.2611%" height="23" fill="rgb(255,242,242)" fg:x="9446" fg:w="68"/><text x="36.5208%" y="171.50"></text></g><g><title>bn254.nr:86:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="36.4705%" y="133" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="9498" fg:w="16"/><text x="36.7205%" y="147.50"></text></g><g><title>bn254.nr:46:9::rhi.assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.5050%" y="109" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9507" fg:w="7"/><text x="36.7550%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.03%)</title><rect x="36.5050%" y="85" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="9507" fg:w="7"/><text x="36.7550%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="36.5089%" y="61" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9508" fg:w="6"/><text x="36.7589%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="36.5319%" y="229" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9514" fg:w="1"/><text x="36.7819%" y="243.50"></text></g><g><title>point.nr:25:9::result[0] += 128 (3 gates, 0.01%)</title><rect x="36.5319%" y="253" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="9514" fg:w="3"/><text x="36.7819%" y="267.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="36.5357%" y="229" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9515" fg:w="2"/><text x="36.7857%" y="243.50"></text></g><g><title>acir::arithmetic (30 gates, 0.12%)</title><rect x="36.5434%" y="229" width="0.1152%" height="23" fill="rgb(255,244,244)" fg:x="9517" fg:w="30"/><text x="36.7934%" y="243.50"></text></g><g><title>acir::memory::init (6 gates, 0.02%)</title><rect x="36.6586%" y="229" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="9547" fg:w="6"/><text x="36.9086%" y="243.50"></text></g><g><title>aes128.nr:62:41::point_to_bytes(shared_secret) (877 gates, 3.37%)</title><rect x="34.4315%" y="277" width="3.3675%" height="23" fill="rgb(255,222,222)" fg:x="8967" fg:w="877"/><text x="34.6815%" y="291.50">aes..</text></g><g><title>point.nr:25:9::result[0] (327 gates, 1.26%)</title><rect x="36.5434%" y="253" width="1.2556%" height="23" fill="rgb(255,233,233)" fg:x="9517" fg:w="327"/><text x="36.7934%" y="267.50"></text></g><g><title>acir::memory::op (291 gates, 1.12%)</title><rect x="36.6816%" y="229" width="1.1174%" height="23" fill="rgb(255,234,234)" fg:x="9553" fg:w="291"/><text x="36.9316%" y="243.50"></text></g><g><title>sha256.nr:110:30::attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) (17 gates, 0.07%)</title><rect x="37.7990%" y="229" width="0.0653%" height="23" fill="rgb(255,246,246)" fg:x="9844" fg:w="17"/><text x="38.0490%" y="243.50"></text></g><g><title>acir::blackbox::range (17 gates, 0.07%)</title><rect x="37.7990%" y="205" width="0.0653%" height="23" fill="rgb(255,246,246)" fg:x="9844" fg:w="17"/><text x="38.0490%" y="219.50"></text></g><g><title>sha256.nr:289:19::msg_block[int_byte_ptr] % mask, zero (1 gates, 0.00%)</title><rect x="37.8643%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9861" fg:w="1"/><text x="38.1143%" y="195.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="37.8643%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9861" fg:w="1"/><text x="38.1143%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="37.8681%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9862" fg:w="1"/><text x="38.1181%" y="171.50"></text></g><g><title>sha256.nr:289:19::msg_block[int_byte_ptr] % mask (2 gates, 0.01%)</title><rect x="37.8681%" y="181" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="9862" fg:w="2"/><text x="38.1181%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="37.8720%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9863" fg:w="1"/><text x="38.1220%" y="171.50"></text></g><g><title>sha256.nr:483:5::verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR) (8 gates, 0.03%)</title><rect x="37.8643%" y="205" width="0.0307%" height="23" fill="rgb(255,247,247)" fg:x="9861" fg:w="8"/><text x="38.1143%" y="219.50"></text></g><g><title>sha256.nr:296:23::msg_block[i], zero (5 gates, 0.02%)</title><rect x="37.8758%" y="181" width="0.0192%" height="23" fill="rgb(255,247,247)" fg:x="9864" fg:w="5"/><text x="38.1258%" y="195.50"></text></g><g><title>acir::arithmetic (5 gates, 0.02%)</title><rect x="37.8758%" y="157" width="0.0192%" height="23" fill="rgb(255,247,247)" fg:x="9864" fg:w="5"/><text x="38.1258%" y="171.50"></text></g><g><title>sha256.nr:486:5::verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr) (1 gates, 0.00%)</title><rect x="37.8950%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9869" fg:w="1"/><text x="38.1450%" y="219.50"></text></g><g><title>sha256.nr:327:19::msg_block[int_byte_ptr], msg_item (1 gates, 0.00%)</title><rect x="37.8950%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9869" fg:w="1"/><text x="38.1450%" y="195.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="37.8950%" y="157" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9869" fg:w="1"/><text x="38.1450%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="37.8989%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9870" fg:w="1"/><text x="38.1489%" y="195.50"></text></g><g><title>sha256.nr:491:29::reconstructed_len * TWO_POW_32 (4 gates, 0.02%)</title><rect x="37.8989%" y="205" width="0.0154%" height="23" fill="rgb(255,248,248)" fg:x="9870" fg:w="4"/><text x="38.1489%" y="219.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.01%)</title><rect x="37.9027%" y="181" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="9871" fg:w="3"/><text x="38.1527%" y="195.50"></text></g><g><title>sha256.nr:112:9::verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size) (14 gates, 0.05%)</title><rect x="37.8643%" y="229" width="0.0538%" height="23" fill="rgb(255,246,246)" fg:x="9861" fg:w="14"/><text x="38.1143%" y="243.50"></text></g><g><title>sha256.nr:495:15::reconstructed_len, len (1 gates, 0.00%)</title><rect x="37.9142%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9874" fg:w="1"/><text x="38.1642%" y="219.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="37.9142%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="9874" fg:w="1"/><text x="38.1642%" y="195.50"></text></g><g><title>acir::arithmetic (9 gates, 0.03%)</title><rect x="37.9181%" y="181" width="0.0346%" height="23" fill="rgb(255,247,247)" fg:x="9875" fg:w="9"/><text x="38.1681%" y="195.50"></text></g><g><title>sha256.nr:502:13::sha256_compression(msg_block, state) (3,904 gates, 14.99%)</title><rect x="37.9181%" y="205" width="14.9906%" height="23" fill="rgb(255,191,191)" fg:x="9875" fg:w="3904"/><text x="38.1681%" y="219.50">sha256.nr:502:13::sha25..</text></g><g><title>acir::blackbox::sha256_compression (3,895 gates, 14.96%)</title><rect x="37.9526%" y="181" width="14.9560%" height="23" fill="rgb(255,192,192)" fg:x="9884" fg:w="3895"/><text x="38.2026%" y="195.50">acir::blackbox::sha256_..</text></g><g><title>sha256.nr:114:9::hash_final_block(msg_block, h) (3,944 gates, 15.14%)</title><rect x="37.9181%" y="229" width="15.1442%" height="23" fill="rgb(255,191,191)" fg:x="9875" fg:w="3944"/><text x="38.1681%" y="243.50">sha256.nr:114:9::hash_f..</text></g><g><title>sha256.nr:506:32::(state[j] as Field).to_be_bytes (40 gates, 0.15%)</title><rect x="52.9087%" y="205" width="0.1536%" height="23" fill="rgb(255,244,244)" fg:x="13779" fg:w="40"/><text x="53.1587%" y="219.50"></text></g><g><title>mod.nr:169:21::self.to_be_radix (40 gates, 0.15%)</title><rect x="52.9087%" y="181" width="0.1536%" height="23" fill="rgb(255,244,244)" fg:x="13779" fg:w="40"/><text x="53.1587%" y="195.50"></text></g><g><title>mod.nr:207:9::self.__to_be_radix (40 gates, 0.15%)</title><rect x="52.9087%" y="157" width="0.1536%" height="23" fill="rgb(255,244,244)" fg:x="13779" fg:w="40"/><text x="53.1587%" y="171.50"></text></g><g><title>acir::blackbox::range (40 gates, 0.15%)</title><rect x="52.9087%" y="133" width="0.1536%" height="23" fill="rgb(255,244,244)" fg:x="13779" fg:w="40"/><text x="53.1587%" y="147.50"></text></g><g><title>sha256.nr:75:26::build_msg_block(msg, message_size, msg_start) (16 gates, 0.06%)</title><rect x="53.0622%" y="229" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="13819" fg:w="16"/><text x="53.3122%" y="243.50"></text></g><g><title>acir::blackbox::range (16 gates, 0.06%)</title><rect x="53.0622%" y="205" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="13819" fg:w="16"/><text x="53.3122%" y="219.50"></text></g><g><title>sha256.nr:238:27::msg_block[i], msg_item as u32 (1 gates, 0.00%)</title><rect x="53.1237%" y="205" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="13835" fg:w="1"/><text x="53.3737%" y="219.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="53.1237%" y="181" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="13835" fg:w="1"/><text x="53.3737%" y="195.50"></text></g><g><title>acir::arithmetic (16 gates, 0.06%)</title><rect x="53.1275%" y="157" width="0.0614%" height="23" fill="rgb(255,246,246)" fg:x="13836" fg:w="16"/><text x="53.3775%" y="171.50"></text></g><g><title>sha256.nr:244:20::lshift8(msg_item, 1) (44 gates, 0.17%)</title><rect x="53.1275%" y="205" width="0.1690%" height="23" fill="rgb(255,243,243)" fg:x="13836" fg:w="44"/><text x="53.3775%" y="219.50"></text></g><g><title>sha256.nr:400:13::item * TWO_POW_8 (44 gates, 0.17%)</title><rect x="53.1275%" y="181" width="0.1690%" height="23" fill="rgb(255,243,243)" fg:x="13836" fg:w="44"/><text x="53.3775%" y="195.50"></text></g><g><title>acir::blackbox::range (28 gates, 0.11%)</title><rect x="53.1890%" y="157" width="0.1075%" height="23" fill="rgb(255,245,245)" fg:x="13852" fg:w="28"/><text x="53.4390%" y="171.50"></text></g><g><title>sha256.nr:81:36::verify_msg_block(msg, message_size, msg_block, msg_start) (87 gates, 0.33%)</title><rect x="53.1237%" y="229" width="0.3341%" height="23" fill="rgb(255,241,241)" fg:x="13835" fg:w="87"/><text x="53.3737%" y="243.50"></text></g><g><title>sha256.nr:247:24::msg_item + msg[k] as u32 (42 gates, 0.16%)</title><rect x="53.2965%" y="205" width="0.1613%" height="23" fill="rgb(255,244,244)" fg:x="13880" fg:w="42"/><text x="53.5465%" y="219.50"></text></g><g><title>acir::blackbox::range (42 gates, 0.16%)</title><rect x="53.2965%" y="181" width="0.1613%" height="23" fill="rgb(255,244,244)" fg:x="13880" fg:w="42"/><text x="53.5465%" y="195.50"></text></g><g><title>aes128.nr:142:29::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(
            ciphertext_shared_secret,
        ) (4,962 gates, 19.05%)</title><rect x="34.4315%" y="349" width="19.0531%" height="23" fill="rgb(255,184,184)" fg:x="8967" fg:w="4962"/><text x="34.6815%" y="363.50">aes128.nr:142:29::derive_aes_s..</text></g><g><title>aes128.nr:91:5::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(
        shared_secret,
        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,
    ) (4,962 gates, 19.05%)</title><rect x="34.4315%" y="325" width="19.0531%" height="23" fill="rgb(255,184,184)" fg:x="8967" fg:w="4962"/><text x="34.6815%" y="339.50">aes128.nr:91:5::derive_aes_sym..</text></g><g><title>aes128.nr:77:27::randomness_extraction_fn(shared_secret) (4,962 gates, 19.05%)</title><rect x="34.4315%" y="301" width="19.0531%" height="23" fill="rgb(255,184,184)" fg:x="8967" fg:w="4962"/><text x="34.6815%" y="315.50">aes128.nr:77:27::randomness_ex..</text></g><g><title>aes128.nr:70:5::sha256::digest(shared_secret_bytes_with_separator) (4,085 gates, 15.69%)</title><rect x="37.7990%" y="277" width="15.6856%" height="23" fill="rgb(255,190,190)" fg:x="9844" fg:w="4085"/><text x="38.0490%" y="291.50">aes128.nr:70:5::sha256::..</text></g><g><title>sha256.nr:26:5::sha256_var(msg, N as u64) (4,085 gates, 15.69%)</title><rect x="37.7990%" y="253" width="15.6856%" height="23" fill="rgb(255,190,190)" fg:x="9844" fg:w="4085"/><text x="38.0490%" y="267.50">sha256.nr:26:5::sha256_v..</text></g><g><title>sha256.nr:84:17::verify_msg_block_padding(msg_block, msg_byte_ptr) (7 gates, 0.03%)</title><rect x="53.4577%" y="229" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="13922" fg:w="7"/><text x="53.7077%" y="243.50"></text></g><g><title>sha256.nr:259:5::verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE) (7 gates, 0.03%)</title><rect x="53.4577%" y="205" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="13922" fg:w="7"/><text x="53.7077%" y="219.50"></text></g><g><title>sha256.nr:296:23::msg_block[i], zero (7 gates, 0.03%)</title><rect x="53.4577%" y="181" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="13922" fg:w="7"/><text x="53.7077%" y="195.50"></text></g><g><title>acir::arithmetic (7 gates, 0.03%)</title><rect x="53.4577%" y="157" width="0.0269%" height="23" fill="rgb(255,247,247)" fg:x="13922" fg:w="7"/><text x="53.7077%" y="171.50"></text></g><g><title>aes128.nr:146:32::aes128_encrypt(plaintext_bytes, iv, sym_key) (10,097 gates, 38.77%)</title><rect x="53.4846%" y="349" width="38.7705%" height="23" fill="rgb(255,156,156)" fg:x="13929" fg:w="10097"/><text x="53.7346%" y="363.50">aes128.nr:146:32::aes128_encrypt(plaintext_bytes, iv, sym_key)</text></g><g><title>acir::blackbox::aes128_encrypt (10,097 gates, 38.77%)</title><rect x="53.4846%" y="325" width="38.7705%" height="23" fill="rgb(255,156,156)" fg:x="13929" fg:w="10097"/><text x="53.7346%" y="339.50">acir::blackbox::aes128_encrypt</text></g><g><title>aes128.nr:184:39::aes128_encrypt(header_plaintext, iv, sym_key) (1,385 gates, 5.32%)</title><rect x="92.2551%" y="349" width="5.3181%" height="23" fill="rgb(255,215,215)" fg:x="24026" fg:w="1385"/><text x="92.5051%" y="363.50">aes128...</text></g><g><title>acir::blackbox::aes128_encrypt (1,385 gates, 5.32%)</title><rect x="92.2551%" y="325" width="5.3181%" height="23" fill="rgb(255,215,215)" fg:x="24026" fg:w="1385"/><text x="92.5051%" y="339.50">acir::b..</text></g><g><title>aes128.nr:197:49::get_random_bytes() (30 gates, 0.12%)</title><rect x="97.5732%" y="349" width="0.1152%" height="23" fill="rgb(255,244,244)" fg:x="25411" fg:w="30"/><text x="97.8232%" y="363.50"></text></g><g><title>acir::blackbox::range (30 gates, 0.12%)</title><rect x="97.5732%" y="325" width="0.1152%" height="23" fill="rgb(255,244,244)" fg:x="25411" fg:w="30"/><text x="97.8232%" y="339.50"></text></g><g><title>note.nr:118:29::compute_note_log(note, storage_slot, recipient, sender) (20,550 gates, 78.91%)</title><rect x="20.1206%" y="421" width="78.9080%" height="23" fill="rgb(255,116,116)" fg:x="5240" fg:w="20550"/><text x="20.3706%" y="435.50">note.nr:118:29::compute_note_log(note, storage_slot, recipient, sender)</text></g><g><title>note.nr:33:5::compute_log(
        note,
        storage_slot,
        recipient,
        sender,
        PRIVATE_NOTE_MSG_TYPE_ID,
    ) (20,550 gates, 78.91%)</title><rect x="20.1206%" y="397" width="78.9080%" height="23" fill="rgb(255,116,116)" fg:x="5240" fg:w="20550"/><text x="20.3706%" y="411.50">note.nr:33:5::compute_log(
        note,
        storage_slot,
        recipient,
        sender,
        PRIVATE_NOTE_MSG_TYPE_ID,..</text></g><g><title>note.nr:82:22::AES128::encrypt_log(plaintext, recipient) (20,550 gates, 78.91%)</title><rect x="20.1206%" y="373" width="78.9080%" height="23" fill="rgb(255,116,116)" fg:x="5240" fg:w="20550"/><text x="20.3706%" y="387.50">note.nr:82:22::AES128::encrypt_log(plaintext, recipient)</text></g><g><title>aes128.nr:257:40::get_random_bytes::&lt;31&gt;() (349 gates, 1.34%)</title><rect x="97.6884%" y="349" width="1.3401%" height="23" fill="rgb(255,232,232)" fg:x="25441" fg:w="349"/><text x="97.9384%" y="363.50"></text></g><g><title>acir::blackbox::range (349 gates, 1.34%)</title><rect x="97.6884%" y="325" width="1.3401%" height="23" fill="rgb(255,232,232)" fg:x="25441" fg:w="349"/><text x="97.9384%" y="339.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.0285%" y="349" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="25790" fg:w="1"/><text x="99.2785%" y="363.50"></text></g><g><title>easy_private_uint.nr:31:9::self.set.insert(addend_note).emit (20,553 gates, 78.92%)</title><rect x="20.1206%" y="469" width="78.9195%" height="23" fill="rgb(255,116,116)" fg:x="5240" fg:w="20553"/><text x="20.3706%" y="483.50">easy_private_uint.nr:31:9::self.set.insert(addend_note).emit</text></g><g><title>note_emission.nr:17:9::_emit(self) (20,553 gates, 78.92%)</title><rect x="20.1206%" y="445" width="78.9195%" height="23" fill="rgb(255,116,116)" fg:x="5240" fg:w="20553"/><text x="20.3706%" y="459.50">note_emission.nr:17:9::_emit(self)</text></g><g><title>note.nr:119:9::context.emit_raw_note_log (3 gates, 0.01%)</title><rect x="99.0285%" y="421" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="25790" fg:w="3"/><text x="99.2785%" y="435.50"></text></g><g><title>private_context.nr:330:23::self.next_counter (3 gates, 0.01%)</title><rect x="99.0285%" y="397" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="25790" fg:w="3"/><text x="99.2785%" y="411.50"></text></g><g><title>private_context.nr:546:9::self.side_effect_counter += 1 (3 gates, 0.01%)</title><rect x="99.0285%" y="373" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="25790" fg:w="3"/><text x="99.2785%" y="387.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="99.0324%" y="349" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="25791" fg:w="2"/><text x="99.2824%" y="363.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.0400%" y="229" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="25793" fg:w="1"/><text x="99.2900%" y="243.50"></text></g><g><title>poseidon2.nr:72:17::sponge.absorb (78 gates, 0.30%)</title><rect x="99.0400%" y="301" width="0.2995%" height="23" fill="rgb(255,241,241)" fg:x="25793" fg:w="78"/><text x="99.2900%" y="315.50"></text></g><g><title>poseidon2.nr:42:13::self.perform_duplex (78 gates, 0.30%)</title><rect x="99.0400%" y="277" width="0.2995%" height="23" fill="rgb(255,241,241)" fg:x="25793" fg:w="78"/><text x="99.2900%" y="291.50"></text></g><g><title>poseidon2.nr:35:22::crate::hash::poseidon2_permutation(self.state, 4) (78 gates, 0.30%)</title><rect x="99.0400%" y="253" width="0.2995%" height="23" fill="rgb(255,241,241)" fg:x="25793" fg:w="78"/><text x="99.2900%" y="267.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.30%)</title><rect x="99.0439%" y="229" width="0.2957%" height="23" fill="rgb(255,241,241)" fg:x="25794" fg:w="77"/><text x="99.2939%" y="243.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="99.3396%" y="229" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="25871" fg:w="2"/><text x="99.5896%" y="243.50"></text></g><g><title>lifecycle.nr:21:21::note.compute_note_hash (157 gates, 0.60%)</title><rect x="99.0400%" y="421" width="0.6028%" height="23" fill="rgb(255,238,238)" fg:x="25793" fg:w="157"/><text x="99.2900%" y="435.50"></text></g><g><title>notes.nr:92:17::aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH) (157 gates, 0.60%)</title><rect x="99.0400%" y="397" width="0.6028%" height="23" fill="rgb(255,238,238)" fg:x="25793" fg:w="157"/><text x="99.2900%" y="411.50"></text></g><g><title>hash.nr:246:5::poseidon2_hash(inputs_with_separator) (157 gates, 0.60%)</title><rect x="99.0400%" y="373" width="0.6028%" height="23" fill="rgb(255,238,238)" fg:x="25793" fg:w="157"/><text x="99.2900%" y="387.50"></text></g><g><title>hash.nr:237:5::std::hash::poseidon2::Poseidon2::hash(inputs, N) (157 gates, 0.60%)</title><rect x="99.0400%" y="349" width="0.6028%" height="23" fill="rgb(255,238,238)" fg:x="25793" fg:w="157"/><text x="99.2900%" y="363.50"></text></g><g><title>poseidon2.nr:16:9::Poseidon2::hash_internal(input, message_size, message_size != N) (157 gates, 0.60%)</title><rect x="99.0400%" y="325" width="0.6028%" height="23" fill="rgb(255,238,238)" fg:x="25793" fg:w="157"/><text x="99.2900%" y="339.50"></text></g><g><title>poseidon2.nr:82:9::sponge.squeeze (79 gates, 0.30%)</title><rect x="99.3396%" y="301" width="0.3033%" height="23" fill="rgb(255,241,241)" fg:x="25871" fg:w="79"/><text x="99.5896%" y="315.50"></text></g><g><title>poseidon2.nr:55:9::self.perform_duplex (79 gates, 0.30%)</title><rect x="99.3396%" y="277" width="0.3033%" height="23" fill="rgb(255,241,241)" fg:x="25871" fg:w="79"/><text x="99.5896%" y="291.50"></text></g><g><title>poseidon2.nr:35:22::crate::hash::poseidon2_permutation(self.state, 4) (79 gates, 0.30%)</title><rect x="99.3396%" y="253" width="0.3033%" height="23" fill="rgb(255,241,241)" fg:x="25871" fg:w="79"/><text x="99.5896%" y="267.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.30%)</title><rect x="99.3472%" y="229" width="0.2957%" height="23" fill="rgb(255,241,241)" fg:x="25873" fg:w="77"/><text x="99.5972%" y="243.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.6429%" y="349" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="25950" fg:w="1"/><text x="99.8929%" y="363.50"></text></g><g><title>main.nr:34:9::storage.counters.at(context.msg_sender()).add (20,713 gates, 79.53%)</title><rect x="20.1206%" y="493" width="79.5338%" height="23" fill="rgb(255,116,116)" fg:x="5240" fg:w="20713"/><text x="20.3706%" y="507.50">main.nr:34:9::storage.counters.at(context.msg_sender()).add</text></g><g><title>easy_private_uint.nr:31:9::self.set.insert (160 gates, 0.61%)</title><rect x="99.0400%" y="469" width="0.6144%" height="23" fill="rgb(255,238,238)" fg:x="25793" fg:w="160"/><text x="99.2900%" y="483.50"></text></g><g><title>private_set.nr:55:9::create_note(self.context, self.storage_slot, note) (160 gates, 0.61%)</title><rect x="99.0400%" y="445" width="0.6144%" height="23" fill="rgb(255,238,238)" fg:x="25793" fg:w="160"/><text x="99.2900%" y="459.50"></text></g><g><title>lifecycle.nr:32:5::context.push_note_hash (3 gates, 0.01%)</title><rect x="99.6429%" y="421" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="25950" fg:w="3"/><text x="99.8929%" y="435.50"></text></g><g><title>private_context.nr:145:69::self.next_counter (3 gates, 0.01%)</title><rect x="99.6429%" y="397" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="25950" fg:w="3"/><text x="99.8929%" y="411.50"></text></g><g><title>private_context.nr:546:9::self.side_effect_counter += 1 (3 gates, 0.01%)</title><rect x="99.6429%" y="373" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="25950" fg:w="3"/><text x="99.8929%" y="387.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="99.6467%" y="349" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="25951" fg:w="2"/><text x="99.8967%" y="363.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="99.6544%" y="301" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="25953" fg:w="3"/><text x="99.9044%" y="315.50"></text></g><g><title>map.nr:39:36::derive_storage_slot_in_map(self.storage_slot, key) (80 gates, 0.31%)</title><rect x="99.6544%" y="469" width="0.3072%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="80"/><text x="99.9044%" y="483.50"></text></g><g><title>map.nr:7:5::poseidon2_hash([storage_slot, key.to_field()]) (80 gates, 0.31%)</title><rect x="99.6544%" y="445" width="0.3072%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="80"/><text x="99.9044%" y="459.50"></text></g><g><title>hash.nr:237:5::std::hash::poseidon2::Poseidon2::hash(inputs, N) (80 gates, 0.31%)</title><rect x="99.6544%" y="421" width="0.3072%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="80"/><text x="99.9044%" y="435.50"></text></g><g><title>poseidon2.nr:16:9::Poseidon2::hash_internal(input, message_size, message_size != N) (80 gates, 0.31%)</title><rect x="99.6544%" y="397" width="0.3072%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="80"/><text x="99.9044%" y="411.50"></text></g><g><title>poseidon2.nr:82:9::sponge.squeeze (80 gates, 0.31%)</title><rect x="99.6544%" y="373" width="0.3072%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="80"/><text x="99.9044%" y="387.50"></text></g><g><title>poseidon2.nr:55:9::self.perform_duplex (80 gates, 0.31%)</title><rect x="99.6544%" y="349" width="0.3072%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="80"/><text x="99.9044%" y="363.50"></text></g><g><title>poseidon2.nr:35:22::crate::hash::poseidon2_permutation(self.state, 4) (80 gates, 0.31%)</title><rect x="99.6544%" y="325" width="0.3072%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="80"/><text x="99.9044%" y="339.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.30%)</title><rect x="99.6659%" y="301" width="0.2957%" height="23" fill="rgb(255,241,241)" fg:x="25956" fg:w="77"/><text x="99.9159%" y="315.50"></text></g><g><title>main.nr:34:9::storage.counters.at (81 gates, 0.31%)</title><rect x="99.6544%" y="493" width="0.3110%" height="23" fill="rgb(255,241,241)" fg:x="25953" fg:w="81"/><text x="99.9044%" y="507.50"></text></g><g><title>map.nr:42:9::state_var_constructor(self.context, derived_storage_slot) (1 gates, 0.00%)</title><rect x="99.9616%" y="469" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="26033" fg:w="1"/><text x="100.2116%" y="483.50"></text></g><g><title>storage.nr:116:23::container_struct.name();

    if is_storage_map(typ) {
        // Map state variables recursively initialize their contents - this includes nested maps.
        let (value_constructor, _) =
            generate_storage_field_constructor(generics[1], quote { slot }, true);
        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)
    } else {
        let storage_size = if parent_is_map {
            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result
            // in slots very far away from one another.
            1
        } else {
            let (_, container_struct_generics) = typ.as_data_type().unwrap();
            let stored_struct = container_struct_generics[0];

            if is_note(stored_struct) {
                // Private notes always occupy a single slot, since the slot is only used as a state variable
                // identifier.
                1
            } else {
                get_storage_size(typ)
            }
        };

        // We assume below that all state variables implement `fn new&lt;Context&gt;(context: Context, slot: Field) -&gt; Self`.
        (quote { $struct_name::new(context, $slot) (1 gates, 0.00%)</title><rect x="99.9616%" y="445" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="26033" fg:w="1"/><text x="100.2116%" y="459.50"></text></g><g><title>easy_private_uint.nr:17:16::storage_slot != 0 (1 gates, 0.00%)</title><rect x="99.9616%" y="421" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="26033" fg:w="1"/><text x="100.2116%" y="435.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.9616%" y="397" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="26033" fg:w="1"/><text x="100.2116%" y="411.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.9654%" y="397" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="26034" fg:w="1"/><text x="100.2154%" y="411.50"></text></g><g><title>utils.nr:356:5::f&quot;dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&amp;mut context);&quot;
        .quoted_contents() (3 gates, 0.01%)</title><rect x="99.9654%" y="493" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="26034" fg:w="3"/><text x="100.2154%" y="507.50"></text></g><g><title>initialization_utils.nr:33:5::context.push_nullifier_read_request (3 gates, 0.01%)</title><rect x="99.9654%" y="469" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="26034" fg:w="3"/><text x="100.2154%" y="483.50"></text></g><g><title>private_context.nr:242:64::self.next_counter (3 gates, 0.01%)</title><rect x="99.9654%" y="445" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="26034" fg:w="3"/><text x="100.2154%" y="459.50"></text></g><g><title>private_context.nr:546:9::self.side_effect_counter += 1 (3 gates, 0.01%)</title><rect x="99.9654%" y="421" width="0.0115%" height="23" fill="rgb(255,248,248)" fg:x="26034" fg:w="3"/><text x="100.2154%" y="435.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="99.9693%" y="397" width="0.0077%" height="23" fill="rgb(255,248,248)" fg:x="26035" fg:w="2"/><text x="100.2193%" y="411.50"></text></g><g><title>acir::arithmetic (5 gates, 0.02%)</title><rect x="99.9770%" y="445" width="0.0192%" height="23" fill="rgb(255,247,247)" fg:x="26037" fg:w="5"/><text x="100.2270%" y="459.50"></text></g><g><title>all (26,043 gates, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="23" fill="rgb(255,100,100)" fg:x="0" fg:w="26043"/><text x="0.2500%" y="531.50"></text></g><g><title>utils.nr:61:27::dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name)) (6 gates, 0.02%)</title><rect x="99.9770%" y="493" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="26037" fg:w="6"/><text x="100.2270%" y="507.50"></text></g><g><title>private_context.nr:94:34::inputs.start_side_effect_counter + 1 (6 gates, 0.02%)</title><rect x="99.9770%" y="469" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="26037" fg:w="6"/><text x="100.2270%" y="483.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="99.9962%" y="445" width="0.0038%" height="23" fill="rgb(255,249,249)" fg:x="26042" fg:w="1"/><text x="100.2462%" y="459.50"></text></g></svg></svg>