{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"Counter","functions":[{"name":"init","hash":"9894958546381537740","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"_owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["init"],"brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","random","notify_created_note_oracle_wrapper","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","notify_created_nullifier_oracle_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"increment","hash":"1142075816383455312","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["increment"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","random","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"get_counter","hash":"4963248285812811511","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"_owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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romE17kmEj4QPo3wOtdEwutcEwmvc00kvM41kfA61zTCjzrXRMLrXBMJr3NNJLzONZHwgfBphNe5JhJe55pIeJ1rIuF1romE17mmEX7SuSYSXueaSHidayLhda6JhA+ETyO8zjWR8DrXRMLrXBMJr3NNJLzONY3ws841kfA610TC61wTCa9zTSR8IHwa4XWuiYTXuSYSXueaSHidayLhda5phF90romE17kmEl7nmkh4nWsi4QPh0wivc00kvM41kfA610TC61wTCa9zTSJ81+hcEwmvc00kvM41kfA610TCB8KnEV7nmkh4nWsi4XWuiYTXuSYSXueaRvhW55pIeJ1rIuF1romE17kmEj4QPo3wOtdEwutcEwmvc00kvM41kfA61zTCdzrXRMLrXBMJr3NNJLzONZHwgfBphNe5JhJe55pIeJ1rIuF1romE17mmEb7XuSYSXueaSHidayLhda6JhA+ETyO8zjWR8DrXRMLrXBMJr3NNJLzONY3wQeeaSHidayLhda6JhNe5JhI+ED6N8DrXRMLrXBMJr3NNJLzONZHwOtc0wg8610TC61wTCa9zTSS8zjWR8IHwaYTXuSYSXueaSHidayLhda6JhNe5phF+1LkmEl7nmkh4nWsi4XWuiYQPhE8jvM41kfA610TC61wTCa9zTSS8zjWN8JPONZHwOtdEwutcEwmvc00kfCB8GuF1romE17kmEl7nmkh4nWsi4XWuaYSfda6JhNe5JhJe55pIeJ1rIuED4dMIr3NNJLzONZHwOtdEwutcEwmvc00j/KJzTSS8zjWR8DrXRMLrXBMJHwifRnidayLhda6JhNe5JhJe55pIeJ1rEuH7RueaSHidayLhda6JhNe5JhI+ED6N8DrXRMLrXBMJr3NNJLzONZHwOtc0wrc61yjCh25avleHfuh2Vrdh2j57aG+ue350l2Mzfy8eu/FmbfNdUj1xcSXVbRdXUn18cSUNSlpaSWUPxZVUqlFcSeUlxZVUElNcSWU8pZW0kx4VV1LpUXEllR4VV1LpUXElDUr6hyXttwtpx6bfKVLXNc336i70uyWdhn797Gm6HZg9ustuatbidFN3/ezxu6TSo+JKKj0qrqTSo+JKKj0qrqTSo9JK2kuPiiup9Ki4kkqPiiup9Ki4kgYlLa2k0qPiSio9Kq6k0qPiSio9Kq6k0qPSShqkR8WVVHpUXEmlR8WVVHpUXEmDkp67pJcySYSyKJOUJ4sySW6yKJM0JosySVhyKNMgNcmiTJKQLMok3ciiTBKLLMoUlCmHMkkhsiiTFCKLMkkhsiiTFCKLMkkhcijTKIXIokxSiCzKJIXIokxSiCzKFJQphzJJIbIokxQiizJJIbIokxQiizJJIXIo0ySFyKJMUogsyiSFyKJMUogsyhSUKYcySSGyKJMUIosySSGyKJMUIosySSFyKNMshciiTFKILMokhciiTFKILMoUlCmHMkkhsiiTFCKLMkkhsiiTFCKLMkkhcijTIoXIokxSiCzKJIXIokxSiCzKFJQphzJJIbIokxQiizJJIbIokxQiizJJITIoU2ikEFmUSQqRRZmkEFmUSQqRRZmCMuVQJilEFmWSQmRRJilEFmWSQmRRJilEDmVqpRBZlEkKkUWZpBBZlEkKkUWZgjLlUCYpRBZlkkJkUSYpRBZlkkJkUSYpRA5l6qQQWZRJCpFFmaQQWZRJCpFFmYIy5VAmKUQWZZJCZFEmKUQWZZJCZFEmKUQOZeqlEFmUSQqRRZmkEFmUSQqRRZmCMuVQJilEFmWSQmRRJilEFmWSQmRRJilEDmUKUogsyiSFyKJMUogsyiSFyKJMQZlyKJMUIosySSGyKJMUIosySSGyKJMUIocyDVKILMokhciiTFKILMokhciiTEGZciiTFCKLMkkhsiiTFCKLMkkhsiiTFCKHMo1SiCzKJIXIokxSiCzKJIXIokxBmXIokxQiizJJIbIokxQiizJJIbIokxQihzJNUogsyiSFyKJMUogsyiSFyKJMQZlyKJMUIosySSGyKJMUIosySSGyKJMUIocyzVKILMokhciiTFKILMokhciiTEGZciiTFCKLMkkhsiiTFCKLMkkhsiiTFCKHMi1SiCzKJIXIokxSiCzKJIXIokxBmXIokxQiizJJIbIokxQiizJJIbIokxQigzINjRQiizJJIbIokxQiizJJIbIoU1CmHMokhciiTFKILMokhciiTFKILMokhcihTK0UIosySSGyKJMUIosySSGyKFNQphzKJIXIokxSiCzKJIXIokxSiCzKJIXIoUydFCKLMkkhsiiTFOIEZeq+hFhXd+3wW5keXMk49dttjtN4vZbx0WcP1ysZwrL32fOyAtM1/VWTbloerJ6/LvZ79fzF0s7q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LGsvmkzGsnatqWRcytoNJ5OxrF12MhnL2r0nk7GsriCZjIGMR8ioizlERl3MITLqYg6RURdzgIx9Dm+PfkXG7bJD290HWn0Ob2I+8nYL24ft3W6o63YL29fs3W5h+4+92y1sn7B3u4X9Pd+73cLSw53bzeFNn0febl27qhzeQHnk7da1q8rhzYhH3m5du6oc3th35O3WtavK4U1yR95uXbuqHN5wduTt1rWryuHNW0febl27qhzeCHXk7da1q8rhTUVH3m5du6oc3qBz5O3WtavK4c0uR95uXbuqHN44cuTt1rWryuFNGEfebl27qhze0HDk7da1q8rhzQFH3m5du6ocnmh/5O3WtavK4UnrR95uXbuqHJ4AfuTt1rWrCnXtqkJdu6pQ164q1LWrGuraVQ117aqGunZVObzF4sjbDXXdbl27qrLeI7F/u3Xtqsp6j8T+7da1qyrrPRL7t1vXrqqs90js325du6qy3iOxf7t17arKeo/E/u3Wtasq7D0Su7db166qsHc97N5uXbuqwt7HsHu7de2qCntnwu7t1rWrKuy9Bru3W9euqrB3D+zebl27qsLeJrB7u3Xtqgp7m8Du7da1qyrsbQK7t1vXrqq0p/7v3W5du6rSnqK/d7t17apKeyr93u3Wtasq7Snve7db166qtKem791uXbuq0p5Cvne7de2qSnuq997tVrWrCk1Vu6pQ17PVQ13PVg91PVs9NKGu261qVxXqerZ6qOvZ6qGuZ6uHup6tHup6tnqo69nqobRnq0d7z9G4rv26qe63xRcdvZLwGB0DHQ/R0UsJj9HRWwmP0dFrCY/RsZrXgv+63dIeQb93u9W8Zvtyu9VsPi+3W80e8XK7oa7brWbHdbndajZGl9utZv9yud1qXn98ud26dlWlPYJ+73br2lWV9gj6vduta1dV2iPo9263rl1VaY+g37vdunZVpT2Cfu9269pVlfYI+r3brWtXVdoj6Pdut65dVWmPoN+73bp2VaU9gn7vduvaVZX2CPq9261rV1XaI+j3breuXVVpj6Dfu926dlWlPYJ+73br2lWV9gj6vduta1dV2iPo9263rl1VaY+g37vdunZVpT2Cfu9269pVlfYI+r3brWtXVdoj6Pdut65dVWmPoN+73bp2VaU9gn7vduvaVZX2CPq9261rV1XaI+j3breuXVVpj6Dfu926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5/i9oPbi0xB7HWt66Pnxb8/zTwXpdQ3ooWernkAPPfRs1OMJBXro2apHz40eerbq8YQCPfRs7Fj3nlCgh56tesx76KFno55o3kMPPT/qef6JVNETCvTQs1WPJxTooWerHrsG9NDzF/c9q3oCPfTQs7FrYNeAHnq26rFrQA89W/XYNaCHnq167BrQQ89WPXYN6KFno57BrgE99GzVY9eAHnq26rFrQA89W/XYNaCHnq16Aj300LNRj2kpPfRs1aNjTU/xetpmKmTTtt1jykedZSk/f8p1gKX8/CnXqZXy8lP+zqefV+nm4L837CsktF+RQOKOREACiUuRqLsprHUdmxUSHspCAok7EmYHSCBxR8LjU0ggcUfCM1FIXIzEkA6vqR5vr2/nggQSlyIRmlTH0DQrJMwlkEDijoS5BBJI3JEISCCBxJKEuQQSSNyRMJdAAok7EuYSSCBxR8JcAolrkehCGtV1i2TPJDzOhgQSSxK1Z9+QQOKOhOk1EkjckTC9RgKJOxKm10ggcUciIIEEEksSptdIXIzE2KbDq9sVEqbXSCBxR8L0Ggkk7kiYXiOBxB0J02skkFiSaEyvkUDijoTpNRJI3JEwvUYCiTsSmrBIXItE2yYSbdc8vzj204uIfVjR406cHnp+uvj5lwrdTpYeeujZqMf9PT30bNWjFUAPPVv12Hmnh56tegI99NCzUY9Nenro+fHiF195VrcmPvzws92PHX1++Nnux0I/P/xs92PngB9+NvsJtg744We7H3sH/PCz3Y/NA3742e7H7gE/F/PTDynaQ71CIiCBBBJLErYEkEDijoTBPxJI3JEwy0cCiTsSxvNIIHFHwsQdCSSWJDpDdCSuReLV1+x25uJIIHFHwqgbCSTuSJheI4HEHQmjOiROTOI75fqqUn6xJtLnPmi104Klh56fLh7TaYxhRU/vPpweerbqcctODz1b9QR66KFnox69MXro2arHxjs99Pyo5/kHrfaW4+mhZ6se8x566Nmqx7yHHnp+1DNML+LuBU96ou18eujZqsciPz30bNVj14Aeev7ivmdVj10DeujZ2DWIgR566Nmox64BPfRs1WPXgB56tuqxa0APPVv12DWgh56teuwa0EPPRj2DXQN66Nmqx64BPfRs1WPXgB56tuqxa0APPVv1mJbSQ89WPTrWJ9fTDO103G1Vty9+djd2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","names":["get_counter"],"brillig_names":["get_counter"]},{"name":"sync_notes","hash":"17086418180893750210","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"decrement","hash":"6075581509430248812","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["decrement"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Counter::decrement_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::decrement_parameters","fields":[]}}]},{"kind":"struct","path":"Counter::increment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_parameters","fields":[]}}]},{"kind":"struct","path":"Counter::init_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::init_parameters","fields":[{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"_owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Counter"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}]}},"file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Counter {\n    use aztec::macros::{functions::{initializer, private,utility}, storage::storage};\n    use aztec::prelude::{AztecAddress, Map};\n    use aztec::protocol_types::traits::ToField;\n    use easy_private_state::EasyPrivateUint;\n    use value_note::balance_utils;\n\n    #[storage]\n    struct Storage<Context> {\n        counters: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n\n\n\n    #[private]\n    #[initializer]\n    fn init(headstart: u64, _owner: AztecAddress) {\n        storage.counters.at(_owner).add(headstart, _owner, context.msg_sender());\n    }\n\n    #[private]\n    fn increment() {\n        //Safety: This is a debug log, and we know that the format string is safe.\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing counter for {}\",\n                [context.msg_sender().to_field()],\n            );\n        }\n        storage.counters.at(context.msg_sender()).add(1, context.msg_sender(), context.msg_sender());\n    }\n\n    #[private]\n    fn decrement() {\n        //Safety: This is a debug log, and we know that the format string is safe.\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Decrementing counter for {}\",\n                [context.msg_sender().to_field()],\n            );\n        }\n        storage.counters.at(context.msg_sender()).sub(1, context.msg_sender(), context.msg_sender());\n    }\n    #[utility]\n    unconstrained fn get_counter(_owner: AztecAddress) -> Field {\n        balance_utils::get_balance(storage.counters.at(_owner).set)\n    }\n\n\n}\n    \n","path":"/Users/synerr/Documents/Dev/aztec/counter/src/main.nr"},"51":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"59":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"62":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"66":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/hash.nr"},"81":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"82":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"83":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"87":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"92":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"95":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"97":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"98":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"100":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"101":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"102":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"104":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"105":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"106":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"107":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"114":{"source":"use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr"},"115":{"source":"use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr"},"120":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"122":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"125":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"128":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"131":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"135":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"137":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"139":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"144":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"145":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"146":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"147":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"149":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"150":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"151":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"154":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"160":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"177":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"178":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"180":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"181":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"183":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"184":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"186":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"188":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"189":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"216":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"261":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"264":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"266":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"271":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"278":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"279":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"280":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"293":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"295":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"296":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"305":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"316":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"335":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"351":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"352":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"360":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/Users/synerr/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"361":{"source":"use dep::aztec::{\n    context::PrivateContext, messages::logs::note::encode_and_encrypt_note,\n    note::note_getter_options::NoteGetterOptions, protocol_types::address::AztecAddress,\n    state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"363":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UtilityContext, note::note_viewer_options::NoteViewerOptions, state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UtilityContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UtilityContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"364":{"source":"use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/value-note/src/filter.nr"},"367":{"source":"use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n","path":"/Users/synerr/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.5/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}